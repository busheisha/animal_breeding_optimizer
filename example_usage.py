#!/usr/bin/env python3
"""
–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Animal Breeding Optimizer
–¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ä–∞–∑–≤–µ–¥–µ–Ω–∏—è —Å–æ–±–∞–∫ —Å –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
"""

import pandas as pd
import numpy as np

from animal_breeding_optimizer import (
    PedigreeProcessor,
    KinshipCalculator,
    BreedingOptimizer,
    DataAnalyzer,
    create_offspring_matrix,
    save_results
)

def make_simple_dog_data():
    # 3 –ø–æ–∫–æ–ª–µ–Ω–∏—è: –æ—Å–Ω–æ–≤–∞—Ç–µ–ª–∏ ‚Üí —Ä–æ–¥–∏—Ç–µ–ª–∏ ‚Üí –ø–æ—Ç–æ–º–∫–∏
    pedigree = [
        # –û—Å–Ω–æ–≤–∞—Ç–µ–ª–∏ (–Ω–µ—Ç —Ä–æ–¥–∏—Ç–µ–ª–µ–π)
        {"id": "F1", "mother_id": "UNKNOWN", "father_id": "UNKNOWN"},
        {"id": "F2", "mother_id": "UNKNOWN", "father_id": "UNKNOWN"},
        {"id": "M1", "mother_id": "UNKNOWN", "father_id": "UNKNOWN"},
        {"id": "M2", "mother_id": "UNKNOWN", "father_id": "UNKNOWN"},
        # –†–æ–¥–∏—Ç–µ–ª–∏ (–∏—Ö —Ä–æ–¥–∏—Ç–µ–ª–∏ ‚Äî –æ—Å–Ω–æ–≤–∞—Ç–µ–ª–∏)
        {"id": "DAM_A", "mother_id": "F1", "father_id": "M1"},
        {"id": "DAM_B", "mother_id": "F2", "father_id": "M1"},
        {"id": "SIRE_A", "mother_id": "F1", "father_id": "M2"},
        {"id": "SIRE_B", "mother_id": "F2", "father_id": "M2"},
        # –ü–æ—Ç–æ–º–∫–∏ (—á–∞—Å—Ç—å ‚Äî –ø–æ–ª–Ω–æ—Ä–æ–¥–Ω—ã–µ)
        {"id": "PUP1", "mother_id": "DAM_A", "father_id": "SIRE_A"},
        {"id": "PUP2", "mother_id": "DAM_A", "father_id": "SIRE_A"},
        {"id": "PUP3", "mother_id": "DAM_B", "father_id": "SIRE_B"},
        {"id": "PUP4", "mother_id": "DAM_B", "father_id": "SIRE_B"},
    ]
    pedigree_df = pd.DataFrame(pedigree)

    # EBV –¥–ª—è –≤—Å–µ—Ö –∂–∏–≤–æ—Ç–Ω—ã—Ö (–º–æ–∂–Ω–æ —Ä–∞–Ω–¥–æ–º–Ω–æ, –Ω–æ –¥–ª—è —Ç–µ—Å—Ç–∞ ‚Äî —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ)
    ebv = np.linspace(90, 110, len(pedigree_df))
    pedigree_df["ebv"] = ebv

    # –î–∞–º—ã –∏ —Å–∏p—ã ‚Äî —Ç–æ–ª—å–∫–æ –ø–æ—Ç–æ–º–∫–∏
    dams_df = pedigree_df[pedigree_df["id"].str.startswith("PUP")].iloc[:2][["id", "ebv"]].reset_index(drop=True)
    sires_df = pedigree_df[pedigree_df["id"].str.startswith("PUP")].iloc[2:][["id", "ebv"]].reset_index(drop=True)

    return dams_df, sires_df, pedigree_df

def main():
    print("Animal Breeding Optimizer - –ü—Ä–∏–º–µ—Ä –¥–ª—è —Å–æ–±–∞–∫ (–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)")
    print("=" * 60)
    # 1. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
    dams_df, sires_df, pedigree_df = make_simple_dog_data()
    # 2. –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–æ–¥–æ—Å–ª–æ–≤–Ω–æ–π
    pedigree_processor = PedigreeProcessor(pedigree_df)
    pedigree_processor.load_and_clean_pedigree()
    pedigree_processor.build_pedigree_graph()
    # 3. –ê–Ω–∞–ª–∏–∑ EBV
    ebv_stats = DataAnalyzer.analyze_ebv_statistics(dams_df, sires_df)
    empty_filtering_stats = {
        'total_pairs': 0,
        'excluded_pairs': 0,
        'included_pairs': 0,
        'excluded_percent': 0,
        'excluded_mean_ebv': 0,
        'included_mean_ebv': 0,
        'excluded_max_ebv': 0,
        'included_max_ebv': 0
    }
    DataAnalyzer.print_analysis_report(ebv_stats, empty_filtering_stats)
    # 4. –ú–∞—Ç—Ä–∏—Ü–∞ —Ä–æ–¥—Å—Ç–≤–∞
    kinship_calculator = KinshipCalculator(pedigree_processor)
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º id –¥–∞–º –∏ —Å–∏p–æ–≤ –≤ —á–∏—Å–ª–æ–≤—ã–µ id –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≥—Ä–∞—Ñ–æ–º
    dams_df['id_num'] = dams_df['id'].map(pedigree_processor.id_mapping)
    sires_df['id_num'] = sires_df['id'].map(pedigree_processor.id_mapping)
    kinship_matrix = kinship_calculator.calculate_kinship_matrix(dams_df, sires_df)
    # 5. –ú–∞—Ç—Ä–∏—Ü–∞ –ø–æ—Ç–æ–º–∫–æ–≤
    offspring_matrix = create_offspring_matrix(
        dams_df, sires_df, kinship_matrix, kinship_threshold=0.05
    )
    # 6. –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è
    optimizer = BreedingOptimizer(
        offspring_matrix,
        max_assign_per_sire=0.5,  # –¥–æ 50% –¥–∞–º –Ω–∞ –æ–¥–Ω–æ–≥–æ –∫–æ–±–µ–ª—è
        pedigree_processor=pedigree_processor,
        optimization_criteria={
            'mean_ebv': {'weight': 1.0, 'maximize': True},
            'variance_ebv': {'weight': 0.01, 'maximize': True},
            'genetic_diversity': {'weight': 0.2, 'maximize': True},
            'constraint_violation': {'weight': -1.0, 'maximize': False}
        }
    )
    result_df, best_individual, hall_of_fame = optimizer.optimize(
        pop_size=20, ngen=10, cxpb=0.8, mutpb=0.2
    )
    save_results(result_df, "example_dog_breeding_assignments.csv")
    print("\n‚úÖ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
    print(f"üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ 'example_dog_breeding_assignments.csv'")

if __name__ == "__main__":
    main() 